generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      String    @default("USER")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model Tour {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  location    String?
  days        Int?
  price       Float
  type        String     @default("single")
  startDate   DateTime?  // Tour start date
  endDate     DateTime?  // Tour end date (for multi-day tours)
  categories  String[]   @default([]) // Array of categories like ['Adventure', 'Nature', 'Fun']
  included    String[]   @default([]) // Array of included items
  excluded    String[]   @default([]) // Array of excluded items
  status      String     @default("draft") // "draft", "in_progress", "published"
  completionPercentage Int @default(0) // 0-100% completion
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookings    Booking[]
  tourPlans   TourPlan[]
}

model TourPlan {
  id          Int      @id @default(autoincrement())
  tourId      Int
  day         Int
  title       String
  description String
  included    String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, day])
}

model Booking {
  id         Int      @id @default(autoincrement())
  date       DateTime @default(now())
  userId     Int?
  guestName  String?
  guestEmail String?
  guestPhone String?
  people     Int
  total      Float
  tourId     Int
  status     String   @default("CONFIRMED")
  notes      String?
  tour       Tour     @relation(fields: [tourId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}
